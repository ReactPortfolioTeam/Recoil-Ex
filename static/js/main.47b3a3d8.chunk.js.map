{"version":3,"sources":["todoList/state/atom/todoListState.js","todoList/components/TodoItem.jsx","todoList/state/atom/todoListFilterState.js","todoList/state/selector/filteredTodoListState.js","todoList/components/PlusButton.jsx","todoList/components/FilterButton.jsx","todoList/components/TodoItemCreator.jsx","todoList/state/selector/todoListStatsState.js","todoList/components/ProgressBar.jsx","todoList/components/TodoListFilters.jsx","todoList/components/TodoList.jsx","App.js","index.js"],"names":["todoListState","atom","key","default","replaceItemAtIndex","arr","index","newValue","slice","TodoItem","item","useRecoilState","todoList","setTodoList","findIndex","listItem","className","type","value","text","onChange","target","newList","checked","isComplete","onClick","removeItemAtIndex","todoListFilterState","filteredTodoListState","selector","get","filter","list","PlusButton","FilterButton","TodoItemCreator","closeModal","Count","useState","inputValue","setInputValue","useSetRecoilState","id","oldTodoList","todoListStatsState","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted","localStorage","setItem","JSON","stringify","ProgressBar","useRecoilValue","divRef","useRef","useEffect","undefined","current","style","width","ref","TodoListFilters","setFilter","TodoList","todoListFilter","localTodoList","setLocalTodoList","isAddPage","setIsAddPage","isFilterPage","setIsFilterPage","parse","getItem","map","todoItem","args","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47b3a3d8.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\r\nimport { atom } from \"recoil\";\r\n\r\nexport const todoListState = atom({\r\n    key: \"todoListState\",\r\n    default: [],\r\n});\r\n","import { useRecoilState } from \"recoil\";\r\nimport { todoListState } from \"../state/atom/todoListState\";\r\n\r\nfunction TodoItem({ item }) {\r\n  const [todoList, setTodoList] = useRecoilState(todoListState);\r\n  const index = todoList.findIndex((listItem) => listItem === item);\r\n\r\n  const editItemText = ({ target: { value } }) => {\r\n    const newList = replaceItemAtIndex(todoList, index, {\r\n      ...item,\r\n      text: value,\r\n    });\r\n    setTodoList(newList);\r\n  };\r\n\r\n  const toggleItemCompletion = () => {\r\n    const newList = replaceItemAtIndex(todoList, index, {\r\n      ...item,\r\n      isComplete: !item.isComplete,\r\n    });\r\n\r\n    setTodoList(newList);\r\n  };\r\n  const deleteItem = () => {\r\n    const newList = removeItemAtIndex(todoList, index);\r\n\r\n    setTodoList(newList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <input type=\"text\" value={item.text} onChange={editItemText} />\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={item.isComplete}\r\n        onChange={toggleItemCompletion}\r\n      />\r\n      <span></span>\r\n\r\n      <button className=\"delete\" onClick={deleteItem}>\r\n        X\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction replaceItemAtIndex(arr, index, newValue) {\r\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\r\n}\r\n\r\nfunction removeItemAtIndex(arr, index) {\r\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\r\n}\r\n\r\nexport default TodoItem;\r\n","import { atom } from \"recoil\";\r\n\r\nexport const todoListFilterState = atom({\r\n    key: \"todoListFilterState\",\r\n    default: \"Show All\",\r\n});\r\n","import { selector } from \"recoil\";\r\nimport { todoListFilterState } from \"../atom/todoListFilterState\";\r\nimport { todoListState } from \"../atom/todoListState\";\r\n\r\nexport const filteredTodoListState = selector({\r\n  key: \"filteredTodoListState\",\r\n  get: ({ get }) => {\r\n    const filter = get(todoListFilterState);\r\n    const list = get(todoListState);\r\n\r\n    switch (filter) {\r\n      case \"Completed\":\r\n        return list.filter((item) => item.isComplete);\r\n      case \"Uncompleted\":\r\n        return list.filter((item) => !item.isComplete);\r\n      default:\r\n        return list;\r\n    }\r\n  },\r\n});\r\n","import React from \"react\";\r\n\r\nconst PlusButton = ({ onClick }) => {\r\n  return (\r\n    <div className=\"plus-button-container\">\r\n      <button type=\"button\" onClick={onClick}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlusButton;\r\n","import React from \"react\";\r\n\r\nconst FilterButton = ({ onClick }) => {\r\n  return (\r\n    <div className=\"filter-button\" onClick={onClick}>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterButton;\r\n","import { useState } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { todoListState } from \"../state/atom/todoListState\";\r\nfunction TodoItemCreator({ closeModal, Count }) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const setTodoList = useSetRecoilState(todoListState);\r\n  let id = Count ?? 0;\r\n  function getId() {\r\n    return id++;\r\n  }\r\n  const addItem = () => {\r\n    setTodoList((oldTodoList) => [\r\n      ...oldTodoList,\r\n      {\r\n        id: getId(),\r\n        text: inputValue,\r\n        isComplete: false,\r\n      },\r\n    ]);\r\n    setInputValue(\"\");\r\n    closeModal(false);\r\n  };\r\n  const onChange = ({ target: { value } }) => {\r\n    setInputValue(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"creator\">\r\n        <h1>Todo Add</h1>\r\n        <textarea type=\"text\" value={inputValue} onChange={onChange} />\r\n        <button type=\"button\" className=\"add\" onClick={addItem}>\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 고유한 ID 생성을 위한 유틸\r\n\r\nexport default TodoItemCreator;\r\n","import { selector } from \"recoil\";\r\nimport { todoListState } from \"../atom/todoListState\";\r\n\r\nexport const todoListStatsState = selector({\r\n  key: \"todoListStatsState\",\r\n  get: ({ get }) => {\r\n    const todoList = get(todoListState);\r\n    const totalNum = todoList.length;\r\n    const totalCompletedNum = todoList.filter((item) => item.isComplete).length;\r\n    const totalUncompletedNum = totalNum - totalCompletedNum;\r\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum;\r\n    if (todoList.length !== 0) {\r\n      localStorage.setItem(\"todoList\", JSON.stringify(todoList));\r\n    }\r\n\r\n    return {\r\n      totalNum,\r\n      totalCompletedNum,\r\n      totalUncompletedNum,\r\n      percentCompleted,\r\n    };\r\n  },\r\n});\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { todoListStatsState } from \"../state/selector/todoListStatsState\";\r\n\r\nconst ProgressBar = () => {\r\n  const { percentCompleted } = useRecoilValue(todoListStatsState);\r\n  const divRef = useRef();\r\n  useEffect(() => {\r\n    if (divRef !== undefined) {\r\n      divRef.current.style.width = `calc(${percentCompleted * 100}% )`;\r\n    }\r\n  }, [percentCompleted]);\r\n  return (\r\n    <div className=\"progress-bar\">\r\n      <div ref={divRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import { useRecoilState } from \"recoil\";\r\nimport { todoListFilterState } from \"../state/atom/todoListFilterState\";\r\n\r\nfunction TodoListFilters({ closeModal }) {\r\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\r\n\r\n  const updateFilter = ({ target: { value } }) => {\r\n    setFilter(value);\r\n    closeModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"filter-page modal\">\r\n      <h1>Filter:</h1>\r\n\r\n      <select value={filter} onChange={updateFilter}>\r\n        <option value=\"Show All\">All</option>\r\n        <option value=\"Completed\">Completed</option>\r\n        <option value=\"Uncompleted\">Uncompleted</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoListFilters;\r\n","import { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { filteredTodoListState } from \"../state/selector/filteredTodoListState\";\r\nimport \"../css/TodoList.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { todoListState } from \"../state/atom/todoListState\";\r\nimport PlusButton from \"./PlusButton\";\r\nimport FilterButton from \"./FilterButton\";\r\nimport TodoItemCreator from \"./TodoItemCreator\";\r\nimport { todoListFilterState } from \"../state/atom/todoListFilterState\";\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport TodoListFilters from \"./TodoListFilters\";\r\n\r\nfunction TodoList() {\r\n  const todoList = useRecoilValue(filteredTodoListState);\r\n  const todoListFilter = useRecoilValue(todoListFilterState);\r\n  const [localTodoList, setLocalTodoList] = useRecoilState(todoListState);\r\n\r\n  const [isAddPage, setIsAddPage] = useState(false);\r\n  const [isFilterPage, setIsFilterPage] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (localTodoList.length === 0 && localStorage[\"todoList\"]) {\r\n      setLocalTodoList(JSON.parse(localStorage.getItem(\"todoList\")));\r\n    }\r\n  }, [localTodoList, setLocalTodoList]);\r\n\r\n  return (\r\n    <div className=\"Container\">\r\n      <div className=\"header\">\r\n        <FilterButton onClick={() => setIsFilterPage(!isFilterPage)} />\r\n        <h1>{todoListFilter}</h1>\r\n        <ProgressBar />\r\n      </div>\r\n      <div className=\"TodoList\">\r\n        {todoList.map((todoItem, index) => (\r\n          <TodoItem key={todoItem.id} item={todoItem} />\r\n        ))}\r\n        <PlusButton onClick={() => setIsAddPage(!isAddPage)} />\r\n      </div>\r\n\r\n      {isAddPage && (\r\n        <TodoItemCreator\r\n          closeModal={(args) => setIsAddPage(args)}\r\n          Count={todoList.length}\r\n        />\r\n      )}\r\n      {isFilterPage && (\r\n        <TodoListFilters closeModal={(args) => setIsFilterPage(args)} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import { RecoilRoot } from \"recoil\";\r\nimport TodoList from \"./todoList/components/TodoList\";\r\n\r\nfunction App() {\r\n    return (\r\n        <RecoilRoot>\r\n            {/* <CharacterCounter /> */}\r\n            <TodoList />\r\n        </RecoilRoot>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}